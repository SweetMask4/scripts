#!/bin/env bash

# Exit if any command fails, if any undefined variable is used, or if a pipeline fails
set -euo pipefail

# Check if the configuration file exists, and if it does, source it
if [ -f "$HOME/scripts/_launch-helper.sh" ]; then
  . "$HOME/scripts/config/_launch-helper.sh"
else
  echo "configuration file not found"
  exit 1
fi


# <<------ Directories ------>> #
book_library="$HOME/Documents/Books"
note_library="$HOME/Documents/notes"
article_library="$HOME/Documents/Articles"

# <<------ Main ------>> #
create_document() {
  # Use dmenu to prompt the user to select the type of document to create
  document_type=$(printf "Basic\nOrg\nLaTeX\nBeamer\nRmark" | ${DMENU} "What kind of note?")

  # Check if the user cancelled the prompt
  if [ -z "$document_type" ]; then
    return
  fi

  case "$document_type" in
    Basic)
      template="SimpleNote.md"
      EXTENSION="md"
      message="Basic Document Created!"
      ;;
    org)
      template="Note.org"
      EXTENSION="org"
      message="Basic Document Created!"
      ;;
    LaTeX)
      template="LaTeX.tex"
      EXTENSION="tex"
      message="LaTeX Document Created!"
      ;;
    Beamer)
      template="Presentation.tex"
      EXTENSION="tex"
      message="Beamer Presentation Created!"
      ;;
    Rmark)
      template="RMarkdown.rmd"
      EXTENSION="rmd"
      message="R Markdown Document Created!"
      ;;
    *)
      echo "Invalid option"
      return 1
      ;;
  esac

  # Use dmenu to prompt the user to enter a name for the note
  cn_name=$(echo "" | ${DMENU} "Enter a name for the note:")

  # Check if the user cancelled the prompt
  if [ -z "$cn_name" ]; then
    return
  fi

  # Check if the file already exists
  if [ -f "$directory/$cn_name.$EXTENSION" ]; then
    # Prompt the user to confirm if they want to overwrite the file
    if ! (echo -e "Yes\nNo" | ${DMENU} "Note already exists. Overwrite?" | grep -q "Yes"); then
      return
    fi
  fi

  notify-send "$message"
  cp "$directory/Templates/$template" "$directory/$cn_name.$EXTENSION"
  $DMEDITOR "$directory/$cn_name.$EXTENSION"
}

open_document() {
  # case insensitive search with ripgrep
  document=$(rg --files --iglob "*.pdf" --iglob "*.epub" --iglob "*.mobi" "$directory")
  selected_document=$(echo "$document" | ${DMENU} "ðŸ“– Open:")
  if [[ -n $selected_document ]]; then
    $PDF_VIEWER "$selected_document"
  fi
}

edit_notes() {
  document=$(rg --files --iglob "*.md" --iglob "*.org" --iglob "*.wiki" --iglob "*.tex" "$directory")
  selected_document=$(echo "$document" | ${DMENU} "ðŸ“– Open:")
  if [[ -n $selected_document ]]; then
    $DMEDITOR "$selected_document"
  fi
}

main() {
  # Prompt the user to select "Library" or "Articles" using dmenu
  selected_dir=$(echo -e "ðŸ“‘ Create Note\nðŸ”– View Notes\nðŸ“š Library\nðŸ“œ Articles" | ${DMENU} "ðŸ“‚ Choose an action:")
  # Set the directory based on the user's selection
  # if selected_dir is not empty
  if [[ -n $selected_dir ]]; then
      case $selected_dir in
          "ðŸ“‘ Create Note")
              directory=$note_library
              create_document 
              ;;
          "ðŸ”– View Notes")
              directory=$note_library
              edit_notes
              ;;
          "ðŸ“š Library")
              directory=$book_library
              open_document
              ;;
          "ðŸ“œ Articles")
              directory=$article_library
              open_document
              ;;
      esac
  else
    exit 0
  fi
}

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "$@"
